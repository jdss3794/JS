css는 위에서 js는 밑에서 실행


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

***** data타입 (숫자, 문자) *****

interger = full number: 정수
float: 소수

text
string: 처음부터 끝까지 모두 글자. ""를 붙인다

console.log();
괄호 안에 있는것을 출력. 문자나 숫자를 넣을 수 있다.

variable(변수): 값을 저장하거나 유지

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

변수 만드는 법 첫번째: const
변수를 만들기 위해 사용하는 constant(상수) = 'const': 바뀌지 않는 값

변수 이름 정하는 규칙: space 사용 금지, 
자바스크립트: veryLongVariableName ->camelCase 낙타 등 모양
파이썬: very_long_variable_name ->snake_case

변수 만드는 법 두번째: let

*** const와 let의 차이: const는 constant(상수)라는 뚯이고 절대 값을 바꿀 수 없다
let은 중간에 바꿀 수 있다. 업데이트 가능
대부분 const를 기본적으로 쓰고 업데이트 하고 싶을때 let을 쓴다

const와 let은 최근에 생긴거고 예전에는 var을 사용했다. 규칙이 따로없음. 중간에 변수 값을 업데이트해도 전혀 알수없다
그래서 const와 let을 쓰는게 좋음

결론: 기본적으로 const를 사용하고 필요할때는 let을 사용. var는 절대 사용하지 말것

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

*****또 다른 data 타입*****
boolean (true or false) -> true: 켜져있음, false: 꺼져있음

null: 값이 없음. 존재하지않음, 자연발생 x
파이썬에는 null대신 none이 있음
go에는 null 대신 nil이 있음

undefined: 값은 있는데 정의되지않음


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Arrays[배열]
무언가를 나열하기 위해 사용, 데이터로 만들어진 list, 리스트는 모든 값이 같은 의미를 가짐

규칙 1. 시작과 끝에 대괄호를 사용 []
규칙 2. 안의 항목은 각각 쉼표로 분리되어야함

daysOfWeek***.push()***: 배열 추가

array(배열)의 목적: 하나의 변수 안에 데이터의 리스트를 가지는 것

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

objects 

의미있는 property를 저장하려고 할때 사용함
각각의 의미를 가진 변수를 만들때는 object를 쓴다
배열이랑 차이점은 중괄호를 쓴다 {}

const player = {
  name: 'daesung',
  points: 6560,
  handsome: 'little bit',
  fat: true,
};

console.log(player);
console.log(player.name);

player.lastName = 'potato';

player.points = 8000;
player.points = player.points + 100;

console.log(player.points);


object는 const로 만들어도 안에 있는 요소는 업데이트(추가) 가능

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
*** function part.1

()은 function 뒤에 붙는다
function이란? 계속 반복해서 사용할 수 있는 코드 조각, 어떤 코드를 캡슐화해서 실행을 여러번 할수있게 해줌
ex) function sayHello() {}

function sayHello() {
  console.log('Hello!');
}

sayHello();
sayHello();
sayHello();

세번 반복 실행

argument란? 인자, 전달인자
function을 실행하는 동안 어떤 정보를 function에게 보낼 수 있는 방법

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
*** function part.2

NaN란? Not a Number

argument 받아와서 표현하기

const player = {
  name: 'daesung',
  sayHello: function (otherPersonsName) {
    console.log('Hello! ' + otherPersonsName + ' nice to meet you');
  },
};

console.log(player.name);
player.sayHello('lynn');
player.sayHello('nico');

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이때까지 배운 것 정리

데이터타입이란? 자바스크립트가 이해할 수 있는 데이터의 종류들

string -> ''text'
number -> 10

데이터를 variable(변수)에 저장 가능

const: 변수 업데이트 불가
let: 변수 업데이트 가능

결론: 기본적으로 const를 사용하고 변수 업데이트가 필요할때는 let을 사용. var는 절대 사용하지 말것

boolean: 0, 1 / on, off / true, false

null: 비어있음. 비어있음이 들어있는 것(말이 좀 이상하긴 함)

undefined: 변수에 값을 부여하지 않은 상태. 값이 전혀 없는 것 (다른 언어에는 거의 없음)

array: 배열. 일종의 list. 하나의 변수 안에 많은 수의 데이터를 가질 때

array[2] = '???' -> 해당 순서에 값을 설정
array.push: 아이템 추가

object: 의미있는 property를 저장하려고 할때 사용함

function은 어떤 코드를 캡슐화해서 그걸 반복해서 사용할 수 있도록 한 것

()은 실행한다는 뜻

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ계산기 만들기ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
const calculator = {
  add: function (a, b) {
    console.log(a + b);
  },
  min: function (a, b) {
    console.log(a - b);
  },
  div: function (a, b) {
    console.log(a / b);
  },

  mul: function (a, b) {
    console.log(a * b);
  },
  powerof: function (a, b) {
    console.log(a ** b);
  },
};

calculator.add(2, 4);
calculator.min(2, 4);
calculator.div(2, 4);
calculator.mul(2, 4);
calculator.powerof(2, 4);

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

return

반환값

매우중요***
한번 return하면 function은 끝난다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

조건문(Conditionals) - if

if (condition) {
  //condition===true
} else {
  //condition===false
}

true인지 false인지 알려준다

prompt: 사용자들에게 창을 띄울 수 있게 해준다 -> 자바스크립드 코드의 실행을 멈춘다
css를 적용 시킬 수 없어서 요즘엔 잘 안쓴다

typeof: value의 타입을 확인할때 사용 -> console.log(typeof 변수명)


parseInt: string을 number로 변환할때 사용
사용자가 숫자가 아닌 걸 입력했을때 인지 가능


string은 큰지 작은지 비교 안됨. 그래서 number로 바꿔야함

NaN(Not a Number): 숫자인지 아닌지 판별하는 방법

function: isNaN ->boolean을 반환한다(true, false)

isNaN: false -> 숫자가 아닌게 아님: 숫자다
isNaN: true -> 숫자가 아닌게 맞다: 숫자아님

else if: 참이면 실행되고 거짓이면 else로 넘어간다

&&(and operator = and 연산자): and -> 둘 다 참이여야함

|| (or operator = or 연산자): or -> 둘 중 하나만 참이여야 참 

=== 동일할때
!== 동일하지 않을때

두개의 else if는 실행할수 없다. 양자택일

우항 작은 괄호부터 실행한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
The document object

javascript와 html은 연결되어있다

javascript에서 html을 읽어올뿐만 아니라 변경도 가능하다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
HTML in Javascript

자바스크립트로 정보를 가져올수있는 방법은 document객체와 element를 가져오는 수 많은 함수들을 이용하는것

수많은 정보를 가지고 있는 document를 호출해서 가져온다

console.dir(title) : log보다 많은 정보를 가져옴

getElementById란 함수를 통해 id로 element를 가져 올수 있다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Searching for elements

많은 element들을 한번에 가지고 와야 할때
'getElementsByClassName' -> array를 가져다 줌
'getElementsByTagName' -> array를 가져다 줌
'getElementsByName' -> array를 가져다 줌
'querySelectorAll' -> array를 가져다 줌

element를 가지고 오는 가장 멋진 방법
★querySelector, querySelectorAll★: element를 css 방식으로 검색할 수 있다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Events Part 1

element의 내부를 보고 싶으면 console.dir() 사용
앞에 on 붙은 자바스크립트 오브젝트들은 모두 event이다
스타일을 자바스크립트에서 변경 가능하다. 매우 놀라운 일

★addEventListener★

const title = document.querySelector('div.hello:first-child h1');

function handleTitleClick() {console.log('title was clicked');} 클릭했을때 어떤행동을 취할지 위에 함수로 정해줘야함

title.addEventListener('click', handleTitleClick); title을 click했을때 handleTitleClick 함수가 작동해야함

event를 listen하는 방법
addEventListner를 호출하고 listen하고싶은 event 이름을 알려준다, 그리고 event가 발생하면 호출할 function을 전달

함수 뒤에 괄호' ( ) ' 는 실행버튼이다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Events Part 2

listen하고 싶은 element를 찾는 가장 좋은 방법은 구글에 찾고 싶은 element의 이름을 mdn에 검색
ex) h1 html element mdn 검색하고 링크에 web APIs라는 문장이 포함된 페이지를 찾는다
혹은 console.dir을 한다 -> on 붙은 친구들을 찾는다 그게 이벤트리스너다

const title = document.querySelector('div.hello:first-child h1');

function handleTitleClick() {
  console.log('title was clicked');
  title.innerText = 'mouse is clicked!';
  title.style.color = 'blue';
} 

function handleMouseEnter() {
  title.innerText = 'mouse is here!';
  title.style.color = 'red';
} 

function handleMouseLeave() {
  title.innerText = 'mouse is gone';
  title.style.color = 'green';
} 

title.addEventListener('click', handleTitleClick);
title.addEventListener('mouseenter', handleMouseEnter);
title.addEventListener('mouseleave', handleMouseLeave);

------------------------------이렇게 변경도 가능, 하지만 선호하지않는다---------------------------------------
title.onclick = handleTitleClick;
title.onmouseenter = handleMouseEnter;
title.onmouseleave = handleMouseLeave;

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
More Events

window

window.addEventListener('resize', handleWindowResize);
window.addEventListener('copy', handleWindowCopy);
window.addEventListener('paste', handleWindowPaste);

window.addEventListener('offline', handleWindowOffline);
window.addEventListener('online', handleWindowOnline);

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
CSS in Javascript

자바스크립트에서 css 스타일을 바꾸는것을 선호하지 않는다

step1. element를 찾아라
step2. event를 listen 해라
step3. 그 event에 반응해라

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
CSS in Javascript part2

style에 적합: css
animation에 적합:  javascript

===: 부호가 3개면 일치하는지 확인하는거고
=: 부호가 1개면 해당 값을 우측 값으로 변경하는것

string을 그대로 여러번 쓰지 말고 변수에 저장해서 사용하면 오타를 줄일 수 있다. 그리고 변수가 오류가 나면
자바스크립트에서 알려준다

자바스크립트로 모든 class name을 변경하지는 않아야 한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
CSS in Javascript part3

className은 그냥 class를 강제로 바꿔버리기 때문에 classList를 사용한다
class 이름은 남기면서 뒤에 clicked를 add하고 remove함

ex) classList.contains (유지)

★toggle function은 h1의 classList에 clicked class가 이미 있는지 확인해서 있으면 clicked를 제거해준다
없으면 clicked를 classList를 추가해준다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 1 (LOGIN - input values) ★★★

input values

1. 우선 user에게 질문을 해야한다 (당신은 누구십니까? 이름이 뭐에요)
2. 그 다음에 그 정보들을 어떻게 받을지에 대해 배운다
3. 그리고 받은 정보를 화면에 표시한다

밖에 div는 getElementBy000로 가져오고 안에 요소는 querySelector로 가져온다

querySelector는 아이디나 클래스 이름을 써줘야하지만 getElementBy000은 써 줄 필요없음

addEventListner 생성하고 위에 function 생성 그리고 addEventListner 부분에 뒤에 ,하고 함수 추가

console.dir()해서 인풋안에 뭐 있는지 알아보고 출력

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 2 (LOGIN - form submission) ★★★

username 유효성 검사하기

input은 굉장히 많은 일을 할수 있다. form에 대해 자세히 공부. 코코아톡 클론 코딩 강의 듣기
(input required maxlength='15' type="text" placeholder="what is your name?" 해주면 아무것도 입력 안하고
로그인 버튼 눌렀을때 입력란 작성하라고 뜨고 = required, 15자 제한이 생김 = maxlength)

자바스크립트 보단 html에서 할수 있는걸 우선적으로 활용해라!!!

form의 기본동작은 submit이다. (제출됨 = 새로고침됨)

form을 활용하면 꼭 로그인 버튼을 누르지 않고 엔터만 쳐도 submit 됨(더 이상 click에 신경 쓸 필요 없다)

하지만 엔터 칠때마다 새로고침(submit) 되기 때문에 그걸 막아주고 userdata를 저장하게끔 해줘야한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 3 (LOGIN - events) ★★★

function 뒤에 () 붙이는건 즉시 실행한다는 뜻이다

근데 빼는 이유: submit event가 발생하면 브라우저가 알아서 function을 실행시켜줌(★★★매우중요★★★)

모든 EventListner function의 첫번째 argument는 항상 지금 막 벌어진 일에 대한 정보

preventDefault() 함수는 브라우저가 어떤 event의 기본 행동이던지 발생하지 않도록 막는것

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 4 (LOGIN - events 2) ★★★

form의 기본동작은 submit이다. (제출됨 = 새로고침됨)
링크의 기본동작: 클릭시 다른 페이지로 넘어가는것
event.preventDefault(); => 이벤트 막아줌

addEventListener 안에 있는 함수는 직접 실행하지 않는다
브라우저가 실행시켜주고
브라우저에서 해당 이벤트에 대한 정보 즉, object를 가지게 된다.
addEventListener의 함수에서 object에 대한 자리만 할당해주면
해당 이벤트가 발생시킨 정보들에 대한 object들을 볼 수 있다!
이때 해당 이벤트가 가진 기본 Default값을 발생시키지 않기 하게 위해선 preventDefault를 이용하여 막을 수 있다!

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 5 (LOGIN - getting username) ★★★

유저가 이름을 제출하면 form 없애기
방법1: html 요소를 없앤다
방법2: css 요소를 이용해서 숨긴다

일반적으로 string만 포함된 변수는 대문자로 표기하고 string을 저장하고 싶을때 사용한다
ex) const HIDDEN_CLASSNAME = 'hidden';

string이랑 변수를 하나로 합쳐서 출력하는 방법 (변수를 string 안에 포함시키는 방법)
1. 'hello  ' + username
2. `hello ${username}` (백틱 사용, 이게 더 최근꺼, 이걸 쓰세요)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 6 (LOGIN - saving username) ★★★

username 기억하기 - api 사용 -> localStorage
localStorage.setItem('username', 'daesung')
localStorage.getItem('username', 'daesung')
localStorage.removeItem('username')

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 7 (LOGIN - Loading Username) ★★★

if 함수 만들어서 localStoragedp 저장. 새로고침해도 데이터 남아있음
string을 반복해서 사용하는경우, 그리고 무조건 같은 경우 상단에 변수로 고정한다 (모두 대문자로 작성하는게 좋음)
실수를 만들고 싶지 않은 string이라는 사실을 기억하고 상기 시키기 좋음

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 8 (LOGIN - 복습) ★★★

1. 유저가 처음 앱을 열면 css에 hidden class 때문에 form이랑 h1 둘다 숨겨진 상태에서 시작
2. 그 다음 자바스크립트가 username이라는 key를 가지고 local storage에서 savedUsername을 얻으려고 함
3. 하지만 대부분의 경우 처음 실행했을때 key와 value값이 없어서 savedUsername = null일 것이다.
4. 그럼 form에서 hidden classname이 사라져서 form이 표시된다
5. 그 다음 addEventListener가 form이 submit되기를 기다리고 있고 submit이 발생하면 onLoginSubmit 함수를 호출함
6. 자바스크립트는 함수를 호출하면서 인자를 주는데 그 인자에는 event에 관한 정보들이 담겨있음
7. 그 정보에는 브라우저가 이벤트에 대한 기본 동작을 못하도록 막는 정보도 같이 있다(event.preventDefault();)
8. 그 다음 다시 form을 숨긴다.
9. 그 다음에 input의 값을 가져온다
10. 그 input값을 username이라는 변수로 저장한 다음에 그 변수값을 local storage에 USERNAME_KEY와 함께 저장한다
11. 그 다음에 paintGreetings 함수를 호출하는데 input 값을 인자로 넣어준다
12. input 값을 받은 paintGreetings 함수는 h1에 `Hello 유저명` 이라는 텍스트를 적어준다
13. 그 다음 paintGreetings 함수는 h1으로부터 hidden을 제거해서 h1을 화면에 띄워준다
14. 그 다음 새로고침하고 다시 실행하면 savedUsername 값이 저장된 것을 확인할 수 있다
15. 그 값이 null이 아니기 때문에 else로가서 다시 paintGreetings 함수로 간다
16. 하지만 이번에는 input 값을 받아오지 않고 local storage로 부터 저장된 유저정보를 받는다
17. 그 다음은 똑같다. h1에 hello 유저명 넣고 hidden은 제거해준다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 9 (CLOCK-Intervals) ★★★

자바스크립트에는 이런 기능이 내장되어있음 :  (두개의 인자'argument'를 받는다)

★setInterval(): 매번 일어나야하는 무언가 (계속 실행) ex)매 2초
ex) setInterval(sayHello, 5000);

첫번째 인자는 실행하고자 하는 function
두번째 인자는 호출되는 function 간격을 몇 ms로 할지 쓰면 된다 (5000ms = 5초)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 10 (CLOCK-Timeouts and Dates) ★★★

★ setTimeout(): 몇초 뒤에 실행 (한번 실행)
ex) setTimeout(sayHello, 5000);

첫번째 인자는 실행하고자 하는 function
두번째 인자는 얼마나 기다릴지 ms 단위로 넣어준다 (5000ms = 5초)

Date Object 툴 사용하기

<시계를 만들었따!!!>

const clock = document.querySelector('h2#clock');

function getClock() {
  const date = new Date();
  clock.innerText = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;
}
getClock(); //즉시호출
setInterval(getClock, 1000); //매초마다 getClock 다시 실행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 11 (CLOCK-PadStart) ★★★

string 한자리를 두자리로 채우기
12:12:1 -> 12:12:01

★PadStart() : string에 쓸 수 있는 function, 길이가 1인 문자가 있으면 string의 '앞' 부분에 padding 추가
★PadEnd() : 길이가 1인 문자가 있으면 string의 '뒷' 부분에 padding 추가

'1'.padStart(2, '0'); => '01' (길이를 2로 설정, 앞쪽에 0 추가)

'12'.padStart(2, '0') => '12' (길이를 2로 설정, 앞쪽에 0 추가)

'1'.padEnd(2, '0') => '10' (길이를 2로 설정, 뒤쪽에 0 추가)

'hello'.padStart(20, 'x') => 'xxxxxxxxxxxxxxxhello'

date.getHours()에는 padStart를 쓸 수 없다. number기 때문에

text <-> number 변환 가능

string() 으로 감싸면 끝

const clock = document.querySelector('h2#clock');

function getClock() {
  const date = new Date();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  clock.innerText = `${hours}:${minutes}:${seconds}`;
}
getClock(); //즉시호출
setInterval(getClock, 1000); //매초마다 getClock 다시 실행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 12 (CLOCK-복습) ★★★

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 13 QUOTES AND BACKGROUND - Quotes ) ★★★

randomness (무작위성)

<Math.module> 자바스크립트 제공

random()은 0~1 사이에 랜덤한 숫자를 제공

Math.random() * 10 => 0에서 10 사이의 숫자

<소수점 뒷자리 없애는 3가지 function>

1. Math.round() -> 반올림
Math.round(1.1) = 1
Math.round(0.1) = 0
Math.round(1.6) = 2
Math.round(0.8) = 1

2. Math.ceil() -> 올림  //숫자를 천장까지 높여준다

3. Math.floor() -> 내림 //숫자를 바닥까지 내려준다

Math.floor(Math.random()*10) => 내림해서 소수점 뒷자리를 없애줌. 정수출력

10개의 명언인데 1개를 추가하려면 어떻게 할까
*10 보다는 array의 길이를 알아내는게 더 좋을듯 -> array.length

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 14 QUOTES AND BACKGROUND - Background) ★★★

자바스크립트 배열 안에 이미지 이름을 image 폴더 안에 파일명과 똑같이 쓴다

자바스크립트에 html 소스 생성 방법 (createElement)

const bgImage = document.createElement('img');

bgImage.src = `img/${chosenImage}`;

document.body.appendChild(bgImage)

appendChild(bgImage)는 html body에 bgimage를 추가한다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 15 QUOTES AND BACKGROUND - 복습 ★★★

1. Math 객체 기능
Math.random() 0부터 1사이 무작위의 값을 반환해줌
Math.floor() 내림
Math.ceil() 올림
Math.round() 반올림

2. JS에서 html 요소를 생성
createElement(" ")
예를 들어,
document.createElement("img")일 경우 html 내에 img 태그를 생성

appendChild()
// 함수 안의 경로에 정의한 값을 가장 뒤에서 기입함
prependChild()
// 반대로 앞에서 기입



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 16 TO DO LIST - Setup ★★★

1. html
1) Todo-list 를 만들기를 원하니 html 에 form 태그로 구조를 만들어 준다. 나중에 JavaScript에서 만지기 쉽게 id는 todo-form으로 설정
2) form 자체는 submit이라는 기본 기능을 내장하는 하나의 묶음 밖에 되지 않는다. 
   우리는 이용자가 todo-list 에 무언가 기입하는 것을 원하기 때문에 form 태그 안에 input 태그를 넣어 'text'를 타이핑할 수 있는 기능을 추가한다.
3) 그 밑에 ul 태그를 생성하여 todo-list에 작성 된 text가 저장 및 나열될 수 있게 한다.

2. JavaScript
1) 앞에 html에서 만든 구조 3가지 ('todo-form', 'todo-form 안의 input', 'todo-list') 에 접속하기 위해 항상 길게 타이핑하는 것은 비효율적이므로 단축을 위해 각각 변수로 설정한다.
2) 이전 greeting 강의에서 form 태그에서의 event는 submit를 발생시키고, 브라우저는 기본값으로 설정되어 있는 새로고침을 하게 된다. 우리는 todo-list를 작성한다고 새로고침 되는 것을 원치 않기 때문에(todo-list를 1,000번 작성한다고 가정한다면 불필요한 새로고침이 1,000번 발생하고 1,000번의 랜덤한 이미지가 로드될 것이다. -> 데이터적으로 비효율적, 시각적으로 불편)
event.preventDefault() 로 기본값을 없애준다.
3) text 상자 안에 글을 작성하고 enter를 눌렀을 때 그 글이 초기화 되게 만들기 위해 toDoInput.value = ""; 을 통해 value를 빈 텍스트로 한다.
4) text 상자를 비게 하는 것은 좋은데 그 전에 이용자가 입력한 텍스트를 저장해야 나중에 ul태그 안에 사용할 수 있기 때문에 toDoInput.value = ""; 로 기입한 텍스트가 사라지기 이전에
const newTodo = toDoInput.value; 를 정의하여 기입한 텍스트가 newTodo라는 값에 저장되게 한다.
5) 앞의 세 가지 동작(기본값방지, 텍스트 저장, text상자비우기)는 한번에 이루어지는 세트이기때문에 효율성 및 편의를 위해 함수로 묶어준다.
function handleTodoSubmit() {
event.preventDefault();
const newTodo = toDoInput.value;
toDoInput.value = "";
}
6) todo-form 안에서 submit이 발생하는 특정 상황에서 함수handleTodoSubmmit을 실행 시키기 위해
toDoform.addEventListner("submit", handleTodoSubmit); 을 기입한다.
(함수 handleTodoSubmit이 항상 실행되고 있는 상태라면 text 창은 항상 비어있는 상태 일 것이기 때문에)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 17 TO DO LIST - Deleting To Dos ★★★

0. #7.1 에서 우리는 기입한 텍스트를 화면에서 보이게 하는 코드까지 작성해보았다! 이제 그 텍스트를 내가 원할 때 지울 수 있게끔 니꼬를 따라가보자

1. JS에서 html 내부에 button 태그 만들기
1) const button = document.createElement("button"); // html에 button 태그를 생성할 수 있도록 button이라는 객체 정의
2) button.innerText = "❌"; // 사용자가 버튼을 누르면 텍스트가 삭제되는 기능이 있다는 것을 인식시키기 위해 버튼 내부 텍스트를 "❌"로 정의 (윈도우 기준: window 키 + . )

3) button.addEventListener("click", deleteToDo); // 버튼에서 이벤트가 발생했을 때 삭제 기능을 담당하는 함수가 실행되도록 한다. 여기에선 "click"이 발생 시, deleteToDo함수가 실생되도록 함

2. 삭제 기능을 담당하는 함수 생성
1) const li = event.target.parentElement; // 이벤트가 발생했들때.해당객체를지정하여.그것의부모태그를지정;
2) li.remove(); // 위에서 지정된 것을 삭제;

3. 정리하면
1) button.addEventListener("click", deleteToDo); 에서 클릭이 발생하면 deleteToDo함수가 실행된다.
2) function deleteToDo(event) { const li = event.target.parentElement; li.remove(); }

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 18 TO DO LIST -  Saving To Dos ★★★

0. 이전 영상에서 우리는 추가와 삭제가 가능한 멋진 todo-list를 화면에 구현했다..!
하지만 새로고침을 하거나 이용자가 누구인가와 관계없이 똑같은 todo-list가 나온다면 우리는 todo-list를 그 때마다 계속해서 작성해야할 것이다. 만약 todo-list를 1,000개 작성했는데 단숨에 날라간다면...? 그건 어딘가 부족한 todo-list 일 거다. 그래서 우린 todo-list에 나타낸 텍스트를 저장하는 기능이 필요하다.

1. todo - list의 배열 생성
1) const toDos = [ ]; // toDo에 들어오는 텍스트를 배열로 묶어 보관하기 위해 빈 array를 생성해준다.

2. 저장 기능을 함수를 정의한다.
1) 아직 기능을 하진 않지만 우리는 화면에 나타낸 텍스트를 저장할 것이기 때문에 대충 그러한 기능을 하는 함수가 있다고 치고 빈 함수
function saveToDos( ) {
};
를 생성한다.
2) 앞에서 만들었던 함수 handleToDosubmut( ); 의 맨 마지막에 저장 기능을 실행할 saveToDos(); 넣어두고 다음에서 기능을 구현한다.

3. todo - list를 저장하는 기능을 수행하는 함수 설정
1) function saveToDos( ) { localStorage.setItem("todos",toDos); } 에 "todos"라는 이름의 카테고리로 저장한다.
2) 하지만 이렇게 저장하게 되면 직접 localStorage 에서 확인해봤을 때 값들이 array안에서
string의 형태가 아닌 상태로 저장된다.
예) key: todos value: a,b,c
3) 하지만 우리는 값들을 string의 형태로 toDos라는 array에 집어넣고 싶기 때문에 니꼬가 알려준 JSON.stringify() 라는 객체를 사용한다. 이 도구는 우리가 대입한 값을 알아서 string의 형태로 바꿔줄 것이다.
예) key: todos value: ["a", "b", "c"]


브라우저에 저장하려면 localstorage 필요

JSON.stringify( ) 활용: javascript object나 array나 어떤것이든 string으로 바꿔줌

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 19 TO DO LIST - Loading To Dos part One ★★★

JSON.parse( ) : 단순한 string을 json 파일 안에 넣으면 배열로 바꿔준다

function sayHello(item) {console.log('this is is the turn of', item)} 
= 위 아래 둘이 같은거임, 그냥 함수랑 화살표 함수
parsedToDos.forEach((item) => console.log('this is the turn of', item));

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 20 TO DO LIST - Loading To Dos part Two★★★

학습목표 : localstorage.setItem('keyName','keyValue')
우리는 로컬저장소의 keyValue를 배열로 만드는 방법을 이해하고 이를 활용할 수 있다.

keyName 에는 하나의 keyValue만 저장된다.
하지만 keyValue 를 'toDos'라고 하고, toDos = [] 라고 하여 우리는 그 안에 하나 이상의 정보를 넣을 수 있게 한다.
👉🏻```function saveToDos() {
localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));
}
=== localstorage.setItem('todos','[]')
```

toDos.push(newTodo)로 이 하나의 keyValue라는 상자 안에 하나 이상의 정보를 담아버리기~~

그리고 다시 저장된 것을 가져올 때에는
```
const savedToDos = localStorage.getItem(TODOS_KEY);
//getItem으로 호출하면 'value' 형태로 호출된다. '' 가 붙은 상태로 호출된다는 말.
if (savedToDos !== null) {
const parseToDos = JSON.parse(savedToDos); //getItem의 '' 를 parse 로 삭제.
toDos = parseToDos; //[] = ['a','b','c']
parseToDos.forEach(paintToDo);
}
```

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 21 TO DO LIST - Deleting To Dos part One ★★★

Date.now()는 밀리초(1000분의 1초)를 주는 함수다


1. 배열의 각각을 구분해주기 위해서 text와 id 값으로 저장할 필요가 있음.
ex) [{text: hi, id:1651114465024}]
현재는 [a,b,c,d,e] 이런 식으로 저장되어 있는 형태임.

2. toDos에 newToDo(문자)를 push 하는 게 아니라 newTodoObj라는 객체를 push 할 것임.
newTodoObj는 text와 id 값을 가지고 있음.
const newTodoObj = {
text: newToDo,
id: Date.now(),
};
그리고 painToDo(newTodoObj)를 해줌.

3. 이때 paintToDo를 하는 과정에서 화면에 object가 출력되는 문제가 생김.
화면에 object가 아닌 text를 출력하기 위해서 span.innerText = newToDo.text로 바꿔줘야 함.

4. li에는 id 값을 넣어줌으로써 각각을 구분할 수 있게 해준다.
li.id = newToDo.id;

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 22 TO DO LIST -  Deleting To Dos part Two ★★★

만약 array에서 무언가를 삭제할때 그건 진짜로 삭제하는게 아니다
-> 지우고 싶은 item을 제외하고 새 array를 만드는것

바로 filter( ) 함수다 (forEach( )와 비슷함)

만약 새 array에서 object를 유지하고 싶으면 무조건 true를 리턴해야함


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 23 WEATHER - Geolocation ★★★

브라우저상에서 위치 찾기

function onGeoSuccess() {}
function onGeoError() {}

navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);


1. navigator 함수를 이용해 사용자의 위치를 알아내는 코드 작성.

navigator.geolocation.getCurrentPosition ( ) 라는 코드를 작성해준다.
이때 getCurrentPosition 은 2개의 argument가 필요하다. 앞쪽에는 모든 게 잘 됐을 때 실행될 함수인 onGeoOk 함수를, 뒤에는 실패했을 때 실행될 함수인 onGeoError 함수를 입력한다.

2. onGeoError() 함수가 실행될 때 :
에러가 났다는 것을 사용자에게 알려주기 위해서
alert("Can't find you. No weather for you."); 를 해준다.

3. onGeoOk 함수가 실행될 때:
function onGeoOk(position){
const lat = position.coords.latitude;
const lng = position.coords.longitude;
console.log("You live in", lat, lng);
}

coord 좌표
latitude 위도
longitude 경도


자바스크립트가 position으로 user의 위치를 전달해준다.
position은 object 이고 위도와 경도 값이 들어있다. positon.coords.latitude와
position.coords.longitude 를 변수에 저장하고 console.log를 해서 사용자에게 보여준다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
★★★ 애플리케이션 만들기 24 WEATHER - Weather API ★★★

API란? 다른 서버와 이야기할 수 있는 방법

fetch는 promise다.
promise란? 당장 뭔가 일어나지않고 시간이 좀 걸린 뒤에 일어남
서버의 응답을 기다려야해서 .then을 붙인다
fetch(url).then();
